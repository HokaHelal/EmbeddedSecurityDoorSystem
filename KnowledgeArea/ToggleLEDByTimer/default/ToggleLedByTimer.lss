
ToggleLedByTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000174  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004a  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000136  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000bc  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023e  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c9  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000003c  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_6>:

static unsigned char Count;
static unsigned char Flag;

ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	if(Flag==1)
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	99 f4       	brne	.+38     	; 0xb8 <__vector_6+0x3c>
	{
		Flag = 0;
  92:	10 92 60 00 	sts	0x0060, r1
		if(++Count>9)
  96:	80 91 61 00 	lds	r24, 0x0061
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 61 00 	sts	0x0061, r24
  a0:	8a 30       	cpi	r24, 0x0A	; 10
  a2:	10 f0       	brcs	.+4      	; 0xa8 <__vector_6+0x2c>
		{
			Count=0;
  a4:	10 92 61 00 	sts	0x0061, r1
		}
		PORTC=0x30;
  a8:	80 e3       	ldi	r24, 0x30	; 48
  aa:	85 bb       	out	0x15, r24	; 21
		PORTC|=Count;
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	90 91 61 00 	lds	r25, 0x0061
  b2:	89 2b       	or	r24, r25
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	03 c0       	rjmp	.+6      	; 0xbe <__vector_6+0x42>
	}
	else
	{
		Flag = 1;	
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 60 00 	sts	0x0060, r24
	}
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:


int main (void)
{
	sei();
  cc:	78 94       	sei
	TIMSK=0x14;
  ce:	84 e1       	ldi	r24, 0x14	; 20
  d0:	89 bf       	out	0x39, r24	; 57
	DDRC=0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
	PORTC=0x30;
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	85 bb       	out	0x15, r24	; 21
	InitTimer();
  da:	0e 94 70 00 	call	0xe0	; 0xe0 <InitTimer>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x12>

000000e0 <InitTimer>:



void InitTimer()
{
	DDRD=0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	81 bb       	out	0x11, r24	; 17
	TCCR1A=0x5C;
  e4:	8c e5       	ldi	r24, 0x5C	; 92
  e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x0D;
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	8e bd       	out	0x2e, r24	; 46
	OCR1AH=0x1F;
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xF0;
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x0F;
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	99 bd       	out	0x29, r25	; 41
	OCR1BL=0xF0;
  f8:	88 bd       	out	0x28, r24	; 40
	
	//OCR1B=0x00;
}
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
